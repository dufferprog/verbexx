// h_map_textfile.h

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
////
////
////            ================
////            h_map_textfile.h -- items for map_textfile.cpp  
////            ================
//// 
////
//// 
////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "h_map_types.h"
 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//    ---------------
//    textfile_C  class 
//    ---------------
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class textfile_C
{
public:
                  textfile_C()                      = default;      // default constructor
    explicit      textfile_C(const std::wstring&);                  // wstring constructor
                  textfile_C(const textfile_C&)     = delete;       // copy constructor
                  textfile_C(textfile_C&&)          = delete;       // move constructor
                 ~textfile_C()                      = default;      // destructor
    textfile_C&   operator=(const textfile_C&)      = delete;       // copy assignment
    textfile_C&   operator=(textfile_C&&)           = delete;       // move assignment

    int           readin(  const std::wstring&);                    // open/read-in/close file -- wide  string filename
    int           writeout(const std::wstring&);                    // open/read-in/close file -- wide  string filename
    int           freeup();                                         // get rid of all lines in lines vector
    uint32_t      line_count(void);                                 // return number of lines in lines vector
    int           get_line(std::wstring&, uint32_t);                // get line 'n'
    int           put_line(std::wstring&          );                // put line at end of lines vector

private:
    std::wstring              in_filename   {       };              // name of file where input data came from
    std::vector<std::wstring> lines         {       };              // vector of text lines from file 
    bool                      read_in       {false  };              // true: read-in data is available in lines vector
    bool                      put_in        {false  };              // true: put-in data is available in lines vector
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int test_textfile(const mapparm_S& parm);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////